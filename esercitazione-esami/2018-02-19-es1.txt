Si implementi la seguente funzione:
float piccolo(float M[R][C], int i, int j)
la funzione restituisce un elemento piccolo della matrice in ingresso M[R][C] (dove R e C sono il numero di righe e
colonne della matrice M e sono due costanti definite precedentemente) calcolato come segue. La ricerca dell’elemento
da restituire deve essere implementata come segue, a partire dalla posizione <i,j> della matrice M (dove i e j sono i
parametri di ingresso della funzione). Ad ogni passo, la ricerca si sposta in una fra le posizioni adiacenti alla posizione
corrente (muovendosi lungo le 8 direzioni possibili), scegliendo quella in cui M assume il valore minore. La ricerca non
può proseguire in una posizione già visitata precedentemente o in cui il valore di M è maggiore di quello alla posizione
corrente. Nel caso non vi sia, fra quelle adiacenti, una posizione che rispetta queste due condizioni, la ricerca termina e
la funzione ritorna il valore della matrice M nella posizione corrente.
Note. Nel caso vi siano più posizioni adiacenti con lo stesso valore minimo di M, l’algoritmo di ricerca ne sceglie una
arbitrariamente. Quando la posizione corrente si trova sul bordo della matrice, vengono analizzate solo le celle adiacenti
in posizioni valide.
Esempio
Ipotizzando i=1 e j=1, e la seguente matrice M su cui effettuare la ricerca, la ricerca restituisce 0.4



float piccolo(float M[R][C], int i, int j)  {

    int row, col;
    float current = M[i][j];
    int minI = i, minJ = j;
    float prev = current;

    do {

    for (row = i-1; row <= row+2; row++) {
        for (col = j-1; col <= col+2; col++) {
            if (current > M[row][col]) {
                minI = row;
                minJ = col;
                current = M[minI][minJ];
            }
        }
    }
    if (current == prev) {
        return current;
    } else {
        i = minI;
        j = minJ;
        prev = current;
    }
    } while (1)

}
